[{"title":"记录：从零开始 搭建属于自己的blog","url":"/2022/05/16/create_blog/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>为什么要自己搭建博客?<br>你看技术大神们哪个没有自己的优秀博客<br>通过做笔记的方式对学习历程进行记录，对所学的知识形成⽂章也是对⾃⼰的交代<br>不懂技术的小伙伴也可以在自己的小天地写文，很爽又很有逼格是不是~</p>\n<p>用知乎、CSDN、博客园、简书等站点进行写作不行吗？<br>当然没问题啊，但是自行建站，一切都可以自己定制，毫无限制，你的地盘你做主<br>拥有属于自己的独立博客   自由，自在~<br>可以看看这篇文章：<a href=\"http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/\">刘未鹏 | Mind Hacks</a><br>更多请看 <a href=\"https://www.zhihu.com/question/19916345\">为什么要自建博客</a>？</p>\n<p>本站是通过Github托管+Hexo博客框架+Next主题搭建而来的<br>GitHub：一个静态站点托管服务+提供.github.io免费域名<br>Hexo：一个高效的博客框架<br>NexT：一个简约风格的网站主题</p>\n<p>Github+hexo搭建个人博客的相关的教程网上有很多，但每位技术大神都写的不太一样(还有受不同环境或版本的影响…)，所以我决定写下来记录一下我搭建的第一个博客的过程，包括我亲身踩过的一些坑orz…希望给和我一样的技术小白提供一些帮助。<br>最后，感谢互联网中提供帮助的各路大神。</p>\n<hr>\n<h1 id=\"搭建步骤概览\"><a href=\"#搭建步骤概览\" class=\"headerlink\" title=\"搭建步骤概览\"></a>搭建步骤概览</h1><ol>\n<li>第一部分 Github的安装及相关配置 <ul>\n<li>注册Github账号</li>\n<li>创建Repository #仓库</li>\n<li>安装Git</li>\n<li>将Git与GitHub账号绑定</li>\n</ul>\n</li>\n<li>第二部分 搭建Hexo博客 安装及相关配置<ul>\n<li>安装Node.js #依赖环境</li>\n<li>安装Hexo框架</li>\n<li>将博客部署到github.io #发布网站</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h1 id=\"Github的安装及相关配置\"><a href=\"#Github的安装及相关配置\" class=\"headerlink\" title=\"Github的安装及相关配置\"></a>Github的安装及相关配置</h1><h2 id=\"注册Github账号\"><a href=\"#注册Github账号\" class=\"headerlink\" title=\"注册Github账号\"></a>注册Github账号</h2><p>由于网站是托管在Github上的，所以首先需要创建Github的账户<br>访问<a href=\"/https://github.com/\">Github官网</a> 右上角<code>Sign up</code>开始创建</p>\n<h2 id=\"创建Repository-仓库\"><a href=\"#创建Repository-仓库\" class=\"headerlink\" title=\"创建Repository #仓库\"></a>创建Repository #仓库</h2><p>注册好Github账户后，继续创建用于托管网站的仓库，按目前的Github网页排版可点击<br><code>New</code>、<code>Start a project</code>、<code>New repository</code>这三个位置进行仓库的创建<br><img src=\"/images/create_blog/myblog1.png\" alt=\"图1\"><br>Repository 仓库名字的格式应该是 <code>username.github.io</code> 也就是你创建好博客后的域名<br>其中username保持与注册用户名一致<br>例如我的username是mysterious-X 仓库名则为<code>mysterious-X.github.io</code><br><img src=\"/images/create_blog/myblog2.png\" alt=\"图2\"><br>其余选项可以按需，博主是全部保持的默认，<br>最后下拉到底，点击<code>Creat repository</code>完成仓库创建</p>\n<h2 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h2><p>Git是什么？参照廖雪峰老师博客中的说法，Git是目前 主流的、开源的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。更多详细介绍可移步至此 <a href=\"https://www.liaoxuefeng.com/wiki/896043488029600/896202815778784\">Git的诞生</a><br>最简单的理解就是网站在本地搭建好后，需要使用Git同步到GitHub上进行托管及上线<br>很多博主在搭建时都推荐了<a href=\"https://www.liaoxuefeng.com/wiki/896043488029600/896067074338496\">廖雪峰老师的Git教程</a> 其中包括了linux、Mac OS、Windows的安装教程。<br>本博客是通过windows系统搭建的，但无奈廖老师的windows部分的教程选择的是默认安装…<br>而我又对众多的选项非常好奇，本着求知欲，所以又多找了几份关于Windows系统的，带图带翻译和详细步骤讲解的安装教程，可以对比着看。<br><a href=\"https://blog.csdn.net/mukes/article/details/115693833\">Git 详细安装教程1</a><br><a href=\"https://blog.csdn.net/weixin_44486583/article/details/122704375\">Git 详细安装教程2</a><br>Git官方windows版下载传送门→<a href=\"https://git-scm.com/download/win\">Git Download for Windows</a> </p>\n<h2 id=\"将Git与GitHub帐号绑定\"><a href=\"#将Git与GitHub帐号绑定\" class=\"headerlink\" title=\"将Git与GitHub帐号绑定\"></a>将Git与GitHub帐号绑定</h2><p>Git安装完成后在桌面任意位置右键菜单点击<code>Git Bash here</code>或者在菜单里搜索<code>Git Bash</code>并打开<br>设置user.name和user.email配置信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global user.name GitHub用户名</span><br></pre></td></tr></table></figure>\n<p>#输入你实际的github注册用户名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global user.email GitHub注册邮箱</span><br></pre></td></tr></table></figure>\n<p>#输入你实际的github注册邮箱</p>\n<p>生成SSH Key 密钥</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C GitHub注册邮箱</span><br></pre></td></tr></table></figure>\n<p>#输入你实际的github注册邮箱</p>\n<p>然后直接一键三连(三次回车)，默认不需要设置密码<br>最后看到这样的界面，就成功生成ssh key了<br><img src=\"/images/create_blog/myblog3.png\" alt=\"图3\"></p>\n<p>配置 SSH key 密钥<br>配置 SSH key 用来将本地git项目与github联系<br>找到生成 .ssh 密钥的文件夹(如上图中标记位置查看自己的，每个人的路径都不一样)，<br>将文件夹内名为<code>id_rsa.pub</code>的密钥内的全部内容复制，<br>#没找到的勾选一下文件扩展名 隐藏的项目<br>复制完后打开<a href=\"https://github.com/settings/keys\">GitHub_Settings_keys</a>页面，<br>#如链接失效，也可在github上点右上角头像下拉菜单 -&gt; 点击Settings -&gt; 左侧列表中点开SSH and GPG keys -&gt; 点击<code>New SSH key</code><br><img src=\"/images/create_blog/myblog4.png\" alt=\"图4\"><br><img src=\"/images/create_blog/myblog5.png\" alt=\"图5\"><br>Title：可以任意填写，我写的是myBlog<br>Key：将刚刚复制的<code>id_rsa.pub</code>密钥内容粘贴至此<br>点击<code>Add SSH key</code>完成<br>最后在Git Bash中检测GitHub公钥设置是否成功，<br>输入以下代码 不要改任何一个字 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh git@github.com</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/create_blog/myblog6.png\" alt=\"图6\"><br>如上则说明本机已成功连接到Github。<br>这里之所以设置GitHub密钥原因是，通过非对称加密的公钥与私钥来完成加密，公钥放置在GitHub上，私钥放置在自己的电脑里。GitHub要求每次推送代码都是合法用户，所以每次推送都需要输入账号密码验证推送用户是否是合法用户，为了省去每次输入密码的步骤，采用了ssh，当你推送的时候，git就会匹配你的私钥跟GitHub上面的公钥是否是配对的，若是匹配就认为你是合法用户，则允许推送。这样可以保证每次的推送都是正确合法的。</p>\n<h1 id=\"搭建Hexo博客-安装及相关配置\"><a href=\"#搭建Hexo博客-安装及相关配置\" class=\"headerlink\" title=\"搭建Hexo博客 安装及相关配置\"></a>搭建Hexo博客 安装及相关配置</h1><h2 id=\"安装Node-js-依赖环境\"><a href=\"#安装Node-js-依赖环境\" class=\"headerlink\" title=\"安装Node.js #依赖环境\"></a>安装Node.js #依赖环境</h2><p><code>Hexo</code>基于Node.js，会包含环境变量及npm的安装，下载<a href=\"https://link.zhihu.com/?target=https://nodejs.org/en/download/\">Node.js</a> 安装包并安装<br>安装后检测Node.js及npm是否安装成功，在命令行中输入 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">node -v</span><br><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/create_blog/myblog7.png\" alt=\"图7\"><br>如返回值如上，则Hexo的环境已全部搭建完毕。</p>\n<h2 id=\"安装Hexo框架\"><a href=\"#安装Hexo框架\" class=\"headerlink\" title=\"安装Hexo框架\"></a>安装Hexo框架</h2><p>环境准备好后，开始安装Hexo<br><code>Hexo</code>是个人博客网站的框架， 首先需要在自己的电脑里创建一个文件夹，例如<code>D:\\myblog\\mysterious-X.github.io\\</code><br>Hexo框架与以后你自己发布的网页都在这个文件夹中<br>此文件夹的名字博主是填写的自己的Repository仓库名</p>\n<p>#博主在之后访问搭建好的页面时，遇到了github.io页面404报错<br>重新搭建了环境并使 Github用户名、Repository仓库名、本地文件夹名 保持一致后解决的<br>所以如果是跟博主一样的新手的话，第一次搭建时可以保守起见，<br>将Github用户名、Repository仓库名、本地文件夹名  保持一致<br>相关资料可参考：<br><a href=\"https://blog.csdn.net/dajian790626/article/details/78595684\">https://blog.csdn.net/dajian790626/article/details/78595684</a><br><a href=\"http://www.jianshu.com/p/380290deb8f0\">http://www.jianshu.com/p/380290deb8f0</a></p>\n<p>创建好后，直接在该文件夹上右击<code>Git Bash Here</code><br>或进入文件夹内，空白地方右击鼠标点击<code>Git Bash Here</code><br><strong>提示</strong>：在进行博客搭建或之后进行优化修改工作时，每次使用命令都要在<code>此目录</code>下进行。<br>使用npm命令安装Hexo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli </span><br></pre></td></tr></table></figure>\n<p>安装完成后，初始化博客</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo init blog</span><br></pre></td></tr></table></figure>\n<p>现在已经搭建好本地的 Hexo 博客了，为了检测我们的网站雏形<br>分别按顺序输入以下三条命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new test_my_site</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n\n<p>三个命令依次是新建一篇博客文章、生成网页、在本地预览的操作。<br>完成后，打开浏览器输入地址：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">localhost:4000</span><br></pre></td></tr></table></figure>\n<p>这样我们就可以看到已经搭建好本地的博客了</p>\n<p><em><strong>常用的Hexo 命令</strong></em><br>hexo init              #初始化博客<br>hexo n 文章标题 #新建文章          hexo new 的简写<br>hexo g                #生成                 hexo generate 的简写<br>hexo s                #启动服务预览   hexo server 的简写<br>hexo d                #部署                 hexo deploy 的简写<br>hexo clean         #清除缓存，若网页正常情况下可忽略这条命令<br>之后每次修改配置文件或新建文章后都需要重新生成一下和部署到github上</p>\n<h2 id=\"将博客部署到github-io-发布网站\"><a href=\"#将博客部署到github-io-发布网站\" class=\"headerlink\" title=\"将博客部署到github.io #发布网站\"></a>将博客部署到github.io #发布网站</h2><p>上步中已经完成了站点的本地预览，接下来要做的就是将网站进行发布，这样可以让更多的人阅读到<br>在hexo框架中最主要的配置文件<code>_config.yml</code>也被称之为站点配置文件，<br>之后的一些站点配置和优化都会用到此文件。<br><img src=\"/images/create_blog/myblog8.png\" alt=\"图8\"><br>编辑站点配置文件，可以使用<code>nodepad++</code>打开<br>翻到末尾，找到deploy开头的地方，进行如下修改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\"><span class=\"built_in\">type</span>: git</span><br><span class=\"line\">repo: 这里填入你之前在GitHub上创建仓库的SSH</span><br><span class=\"line\">branch: master</span><br></pre></td></tr></table></figure>\n<p>repo的地址：进入 Github 个人主页中，点右上角头像中的<code>Repositories</code>，点进之前新建的项目中，点击<code>code</code>，复制新建的独立博客项目的 <code>SSH</code> 码，复制粘贴至站点文件<code>repo:</code> 的后面<br><strong>一定要注意语法，要用英文符号的<code>：</code>，所有的<code> ：</code> 后面必须加一个<code>空格</code>，不然会报错。</strong><br><img src=\"/images/create_blog/myblog9.png\" alt=\"图9\"><br><img src=\"/images/create_blog/myblog10.png\" alt=\"图10\"><br>修改完后保存退出。</p>\n<p>最后安装Git部署插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>此步是为了给hexo d·这个命令做相应的配置，让hexo知道你要把blog部署在哪个位置<br>安装完成后依次输入以下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo g </span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<p>完成后，打开浏览器，在地址栏输入你的放置个人网站的仓库路径，即 <a href=\"http://xxxx.github.io/\">http://xxxx.github.io</a><br>比如我的xxxx就是我的GitHub用户名: <a href=\"https://mysterious-x.github.io/\">mysterious-x.github.io</a><br>如果你发现你的博客与博主一样已经上线了，可以在网络上被访问到了。<br>那么….<br>           <em><strong>恭喜你~！你的博客已经搭建好啦！</strong></em></p>\n<p>至此，我的首个博客基础搭建部分就算完毕了，后续只需要通过一些简单的Markdown语法就可以快速生成一篇博客了。</p>\n<p>附：<br><em><strong>初识Markdown语法</strong></em><br>Markdown也是现在各博客平台比较主流的编辑语法，入门只要3-5分钟。<br>教程也是网上一抓一大把，在此我推荐几篇我个人认为比较简洁明了的，非常之好上手。<br>传送门1~  -&gt;  <a href=\"https://www.jianshu.com/p/191d1e21f7ed\">简书-Markdown基本语法</a><br>传送门2~  -&gt;  <a href=\"https://www.runoob.com/markdown/md-tutorial.html\">菜鸟教程-Markdown 教程</a><br>传送门3~  -&gt;  <a href=\"https://blog.csdn.net/afei__/article/details/80717153\">CSDN-Markdown语法介绍</a></p>\n<p>后续会对博客进行更多个性化的功能定制~<br>继续打造独一无二且只属于你的个性化博客~<br>详参下篇！~</p>\n<p><strong>参考文献</strong><br><a href=\"https://zhuanlan.zhihu.com/p/32957389\">技术小白搭建个人博客 github+hexo</a><br><a href=\"https://zhuanlan.zhihu.com/p/26625249\">GitHub+Hexo 搭建个人网站详细教程</a><br><a href=\"https://www.liaoxuefeng.com/wiki/896043488029600\">史上最浅显易懂的Git教程！</a></p>\n","categories":["Github","Hexo","Blog"],"tags":["博客搭建","学习笔记"]},{"title":"Hello World","url":"/2022/05/14/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"Hexo + nexT主题 之 博客优化","url":"/2022/05/18/optimization_blog/","content":"<p>在完成了基础搭建工作后，虽然已经可以开始写文章了，但是觉得页面有些过于素净了，另外还存在一些bug，于是便有了以下的一系列折腾…<br>网上修改方案千千万，本文将只针对我做过的优化项，及我所踩过的坑进行列举<br>以下内容并非每一项都需要跟着做，只挑选个人认为有用或有意思的部分即可~</p>\n<h1 id=\"绑定个人域名\"><a href=\"#绑定个人域名\" class=\"headerlink\" title=\"绑定个人域名\"></a>绑定个人域名</h1><p>emm..关于个人域名的话，不绑定个人域名也完全没有问题，不会影响后续的任何使用<br>但是 引用博主<a href=\"http://wu.run/\">吴润 · RunDouble</a>的描述</p>\n<blockquote>\n<p>域名是网站的入口，也是网站的第一印象，比如饿了么的官网的域名是：<a href=\"https://www.ele.me/\">https://www.ele.me/</a> ，很是巧妙。常见的有com,cn,net,org等后缀，也有小众的xyz,me,io等后缀，根据你自己的喜好，选择不同的后缀，比如我选择就是常见的com后缀。很多小众奇特的后缀在大陆是没办法备案的，网站也就无法上线。然而使用GitHub托管我们的网站，完全不需要备案，因为托管我们的网站内容的服务器在美国，而且在国内备案流程也比较繁杂，时间需要一周左右。</p>\n</blockquote>\n<p>正如此博主最终选择的域名，亦是如此巧妙 <a href=\"http://wu.run/\">http://wu.run/</a></p>\n<p>所以我也决定进行效仿，启用一个自己的<code>个性化域名</code>。</p>\n<p>申请域名的地方有很多，国内比较主流的域名代理厂商有阿里云和腾讯云，<br>我选择的是从阿里云上购买域名并绑定：<a href=\"https://www.aliyun.com/\">阿里云-为了无法计算的价值</a> 申请入口：<a href=\"https://wanwang.aliyun.com/domain/\">域名注册</a><br>购买域名这也是我们整个搭建过程中惟一一个需要花钱的地方。如果你已经有了空闲域名就无需购买，直接使用即可。</p>\n<p>我在购买的时候只单纯购买了域名，不建议一次性购买太长时间例如5年10年虽然也不贵，但是毕竟第一次，7-10块钱买个一年的试试水，后续不喜欢了还可以随时更换。然后我是未增购任何增值服务，因为网站是托管在github上的所以也不需要备案等相关增值服务。后续如果自己有其他的需要可再自行增购。</p>\n<p>购买好域名后，登录到<a href=\"https://account.aliyun.com/login/login.htm\">阿里云</a>，进入<a href=\"https://dc.console.aliyun.com/\">管理控制台</a>找到域名列表，找到你购买的域名，进行实名认证，认证完毕后点击进入你购买的域名，点击域名解析<br><img src=\"/images/myblog11.png\" alt=\"图片11\"><br>点击添加记录，此时可以看到有一些选项需要我们填写，<br><img src=\"/images/myblog12.png\" alt=\"图片12\"><br>我这里一共添加了三条解析记录，可参考上图。<br>其中<code>解析路线</code>不用点进去选择，保持默认即可，<code>TTL</code>也保持默认，<br>需要修改的是 <code>记录类型</code>、<code>主机记录</code>、<code>记录值</code> 这三项<br>第一个主机记录的值我是通过ping自己的xxxx.github.io域名得出来的<br>第二个主机记录的值填写的是GitHub的地址是192.30.252.153<br>第三个记录类型是CNAME，CNAME的记录值是：<code>你的实际用户名.github.io</code></p>\n<blockquote>\n<p>在通过ping获取个人域名的ip时，意外发现cmd的位置在桌面时ping命令用不了(之前都正常的，就离谱)最终定位到是系统变量值中未添加c:\\windows\\system32</p>\n</blockquote>\n<p>以上都添加好后登录回GitHub，进入之前创建的仓库，点击<code>Settings</code>，设置<code>Custom domain</code>，输入购买的域名，点<code>save</code>保存<br><img src=\"/images/myblog13.png\" alt=\"图片13\"><br>接着进入<strong>Hexo博客站点目录</strong>中的&#x2F;source目录下，创建一个记事本文件，将你购买的域名输入进去。<br><img src=\"/images/myblog14.png\" alt=\"图片14\"><br>保存，文件命名为<code>CNAME</code> ，注意保存成<code>所有文件</code>而不是<code>txt文件</code>。<br><img src=\"/images/myblog15.png\" alt=\"图片15\"><br>最后回到博客的<code>Hexo站点目录</code>内，点击右键打开<code>Git bash here</code>命令行，依次输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<p>完成后打开浏览器在地址栏输入个性化域名就直接跳转到你自己搭建的网站上了。</p>\n<h1 id=\"区分配置文件位置\"><a href=\"#区分配置文件位置\" class=\"headerlink\" title=\"区分配置文件位置\"></a>区分配置文件位置</h1><p>从此刻开始要明确注意区分配置文件位置<br>Hexo博客站点目录内的<code>_config.yml</code> 被称为<strong>站点配置文件</strong><br>Hexo博客站点目录&#x2F;themes&#x2F;主题目录&#x2F; 内的<code>_config.yml</code> 被称为<strong>主题配置文件</strong><br>例如我的next的主题配置文件位置：<strong>Blog&#x2F;themes&#x2F;next&#x2F;_config.yml</strong></p>\n<p><strong>这两个位置之后会经常用到，注意区分~！</strong></p>\n<h1 id=\"修改网站相关信息\"><a href=\"#修改网站相关信息\" class=\"headerlink\" title=\"修改网站相关信息\"></a>修改网站相关信息</h1><p>在博客的左侧页面可以显示一些基础信息，通过修改站点配置文件<code>_config.yml</code>，进行相应的更改</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">title: Mysterious-X的博客  #博客名</span><br><span class=\"line\">subtitle: 积跬步以至千里！  #副标题</span><br><span class=\"line\">description: myblog   #网页描述,给搜索引擎看的</span><br><span class=\"line\">author: Mr.X    #作者,在博客底部可以看到</span><br><span class=\"line\">language: zh-CN  #语言,不填则默认英文</span><br><span class=\"line\">timezone: Asia/Shanghai  #时区</span><br></pre></td></tr></table></figure>\n<p>此处需要注意<code>language</code>和<code>timezone</code>都是有输入规范的，</p>\n<blockquote>\n<p>博主此处踩坑，后续将网站主题换为next后，中文页面失效了，<br>由于主题被从默认状态替换为了主题状态，所以调用的主题配置文件不一样了，主题会去调用自带的language目录内文件，根据不同的主题，文件名可能是<code>zh-CN</code>或是<code>zh-Hans</code>可自行查看<br>例如我的<code>next</code>主题语言目录<strong>Blog&#x2F;themes&#x2F;next&#x2F;language</strong>中的就是<code>zh-Hans</code><br>后续又将站点配置文件中language: <code>zh-CN</code>改为了<code>zh-Hans</code>后恢复正常。</p>\n</blockquote>\n<h1 id=\"更换Hexo主题\"><a href=\"#更换Hexo主题\" class=\"headerlink\" title=\"更换Hexo主题\"></a>更换Hexo主题</h1><p>博主是主题是NexT，其Github网址为：<a href=\"https://github.com/iissnan/hexo-theme-next\">iissnan&#x2F;hexo-theme-next</a><br>首先将NexT的主题源文件下载到本地，<br>在<code>Hexo站点目录内</code>使用Git克隆指令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n<p>修改站点配置文件:<code>_config.yml</code>找到<code>theme</code>属性，将其由默认主题<code>landscape</code>改为<code>next</code>。<br>然后执行部署指令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n<p>最后通过本地浏览器访问<code>localhost:4000</code>进行预览，预览出现问题的 可参考下一段落<code>安装next主题后页面乱码</code></p>\n<p>在本地访问确认没问题以后，再部署到github上</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<p>提交后便可以在互联网的博客上看到修改主题后的样式了。<code>gexo d</code> 提交后会有1-3分钟的延迟，看到站点没有第一时间更换过来不要着急！~<br>虽然上篇文章讲过，但是博主还是要再次强调，<br>之后的所有修改，无论配置文件或新建文章后都需要重新生成一下和部署到github上，有些时候新的功能或效果不生效，可尝试<code>hexo clean</code>清除缓存后，重新用<code>hexo g</code> 生成，然后再本地预览或推送到git上。<br><code>hexo d</code>和<code>hexo s</code>，两者的区别在于，前者是将博客部署到远程的Github上，而后者是运行在本地，通过localhost:4000在浏览器中访问。后者是为了调试配置方便而使用，但是最终本地博客还是需要hexo deploy指令将其部署至Github上<br><strong>请牢记 hexo g + hexo d 和 hexo g + hexo s 这个两个组合~</strong><br>        生成 + 部署      生成 + 预览</p>\n<blockquote>\n<p>后续补充<br>博客优化了一多半之后，在某篇文章中了解到，博主用的这个next 主题的源代码版本较为落后，已经停止更新了，还有其他版本例如6、7、8，<br>博主由于也是第一次搭建，所以用的是多数搭建教程中推荐的默认地址，Next 是5.1.4版本，会存在少量bug，但也已都成功处理了，处理办法在下面的正文中也有写到，不多，3~4处吧。也比较好处理。<br>如果嫌麻烦的，也可以选择其他的next版本看看，配置都是大同小异的，可能部分需要略微做一些小的修改</p>\n</blockquote>\n<blockquote>\n<p>NEXT主题历年的Github存储源<br>2014- 2017年<br><a href=\"https://github.com/iissnan/hexo-theme-next\">https://github.com/iissnan/hexo-theme-next</a><br>2018-2019<br><a href=\"https://github.com/theme-next/hexo-theme-next\">https://github.com/theme-next/hexo-theme-next</a><br>2020年<br><a href=\"https://github.com/next-theme/hexo-theme-next\">https://github.com/next-theme/hexo-theme-next</a></p>\n</blockquote>\n<h1 id=\"安装next主题后页面乱码\"><a href=\"#安装next主题后页面乱码\" class=\"headerlink\" title=\"安装next主题后页面乱码\"></a>安装next主题后页面乱码</h1><p>安装完next主题后，本地预览是一堆代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">“ &#123;% extends ‘_layout.swig‘ %&#125; &#123;% import ‘_macro/post.swig‘ as post_templa</span><br></pre></td></tr></table></figure>\n<p>查询到原因是hexo在5.0之后把部分功能&#x2F;依赖给删除了需要自己手动安装<br><strong>解决方案</strong><br>安装依赖文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i hexo-renderer-swig</span><br></pre></td></tr></table></figure>\n<p>参考文献：<a href=\"https://blog.csdn.net/qq_44774831/article/details/119278514\">https://blog.csdn.net/qq_44774831/article/details/119278514</a><br>成功解决</p>\n<h1 id=\"设置主题模式\"><a href=\"#设置主题模式\" class=\"headerlink\" title=\"设置主题模式\"></a>设置主题模式</h1><p>在Hexo主题中，有四种不同的模式，通过切换模式，让NexT主题显示不一样的样式。<br>修改主题配置文件: <code>_config.yml</code>，在其中找到scheme属性，可看到默认有4种主题模式</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Schemes</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Muse</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Mist</span></span><br><span class=\"line\">scheme: Pisces</span><br><span class=\"line\"><span class=\"comment\">#scheme: Gemini</span></span><br></pre></td></tr></table></figure>\n<p>NexT主题默认使用Muse模式，笔者采用的是Pisces模式，读者可逐一尝试后，根据自己的喜好选择其中一种模式，取消掉前面的#号注释即可。<br>不想逐一尝试的也可直接参考此篇文章中图片：<a href=\"https://afuya.blog.csdn.net/article/details/107424935?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-107424935-blog-104418517.pc_relevant_paycolumn_v3&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-107424935-blog-104418517.pc_relevant_paycolumn_v3&utm_relevant_index=1\">next主题添加背景动画</a></p>\n<h1 id=\"设置预览摘要\"><a href=\"#设置预览摘要\" class=\"headerlink\" title=\"设置预览摘要\"></a>设置预览摘要</h1><p>首页默认状态是显示所有文章的列表，和每一篇文章都显示所有内容，这样感觉看起来不舒服，这时候可以启用预览摘要模式</p>\n<p><strong>实现方法</strong></p>\n<p>修改主题配置文件: _config.yml 找到<code>auto_excerpt</code>属性，将<code>enable</code>设置为<code>true</code> ，将<code>length</code>设置为想要预览到的字数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">auto_excerpt:</span><br><span class=\"line\"><span class=\"built_in\">enable</span>: <span class=\"literal\">true</span>  <span class=\"comment\">#将原有的false改为true</span></span><br><span class=\"line\">length: 150   <span class=\"comment\">#设置预览的字数</span></span><br></pre></td></tr></table></figure>\n<p>也可在文章中任意位置添加<code>&lt;!-- more --&gt;</code><br>可自定义 [Read More] 按钮之前要显示的内容！</p>\n<p><strong>实现效果</strong><br>图</p>\n<h1 id=\"添加个人头像\"><a href=\"#添加个人头像\" class=\"headerlink\" title=\"添加个人头像\"></a>添加个人头像</h1><p><strong>实现方法</strong></p>\n<p>修改主题配置文件: _config.yml 找到<code>avatar</code>字段,进行修改:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Sidebar Avatar</span></span><br><span class=\"line\"><span class=\"comment\"># in theme directory(source/images): /images/avatar.gif</span></span><br><span class=\"line\"><span class=\"comment\"># in site  directory(source/uploads): /uploads/avatar.gif</span></span><br><span class=\"line\">avatar: /images/head_icon.jpg</span><br></pre></td></tr></table></figure>\n<p>先将avatar字段前的#删除，然后粘贴上头像的目录位置或者链接。<br>博主是将头像图片保存在了主题目录下的source&#x2F;images文件夹，也可以存放在站点目录下的source&#x2F;uploads文件夹。也可以将自己的头像图片，保存在图床的某个地方，然后将对应的url地址复制过来，添加在avatar字段后即可。</p>\n<p><strong>实现效果</strong><br>图片</p>\n<h1 id=\"设置网站图标\"><a href=\"#设置网站图标\" class=\"headerlink\" title=\"设置网站图标\"></a>设置网站图标</h1><p><strong>实现方法</strong></p>\n<p>修改主题配置文件: _config.yml ，找到以下字段，进行相应的修改：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Put your favicon.ico into `hexo-site/source/` directory.</span><br><span class=\"line\">favicon: /web_icon.jpg</span><br></pre></td></tr></table></figure>\n<p>博主也是将网站图标的图片保存在了主题目录下的source&#x2F;images文件夹内。</p>\n<p><strong>实现效果</strong><br>图</p>\n<h1 id=\"增加导航栏菜单选项\"><a href=\"#增加导航栏菜单选项\" class=\"headerlink\" title=\"增加导航栏菜单选项\"></a>增加导航栏菜单选项</h1><p>默认情况下，导航栏有首页、归档、关于三个选项，除此博主还添加了分类、标签和关于。</p>\n<p><strong>实现方法</strong></p>\n<p>修改主题配置文件: _config.yml，找到<code>menu</code>属性，将<code>categories</code>、 <code>tags</code>、<code>about</code>项前的 # 号注释去掉</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">  home: / || home</span><br><span class=\"line\">  about: /about/ || user</span><br><span class=\"line\">  tags: /tags/ || tags</span><br><span class=\"line\">  categories: /categories/ || th</span><br><span class=\"line\">  archives: /archives/ || archive</span><br><span class=\"line\">  <span class=\"comment\">#schedule: /schedule/ || calendar</span></span><br><span class=\"line\">  <span class=\"comment\">#sitemap: /sitemap.xml || sitemap</span></span><br><span class=\"line\">  <span class=\"comment\">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure>\n<p>然后执行如下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new page <span class=\"string\">&quot;categories&quot;</span>   <span class=\"comment\">#添加分类页面</span></span><br><span class=\"line\">hexo new page <span class=\"string\">&quot;tags&quot;</span>         <span class=\"comment\">#添加标签页面</span></span><br><span class=\"line\">hexo new page <span class=\"string\">&quot;about&quot;</span>        <span class=\"comment\">#添加关于页面</span></span><br></pre></td></tr></table></figure>\n<p>执行完上述指令后，在Hexo站点目录&#x2F;source&#x2F;文件夹下创建三个文件夹，命名分别为：categories、tags、about文件夹(一般会自动创建，没有的手动添加一下),在这些文件夹中分别会创建一个以index命名的Markdown文件，对这三个Markdown文件内容进行修改，使之分别为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">  title: 分类</span><br><span class=\"line\">  <span class=\"built_in\">date</span>: 2017-03-12 22:06:24</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">&quot;categories&quot;</span></span><br><span class=\"line\">  ---</span><br><span class=\"line\"></span><br><span class=\"line\">  ---</span><br><span class=\"line\">  title: 标签</span><br><span class=\"line\">  <span class=\"built_in\">date</span>: 2017-03-12 17:27:16</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">&quot;tags&quot;</span></span><br><span class=\"line\">  ---</span><br><span class=\"line\"></span><br><span class=\"line\">  ---</span><br><span class=\"line\">  title: 关于</span><br><span class=\"line\">  <span class=\"built_in\">date</span>: 2017-03-12 22:07:26</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">&quot;about&quot;</span></span><br><span class=\"line\">  ---</span><br></pre></td></tr></table></figure>\n<p>完成文件的修改，然后重新部署Hexo即可完成菜单选项的添加。</p>\n<h1 id=\"给文章添加标签及分类\"><a href=\"#给文章添加标签及分类\" class=\"headerlink\" title=\"给文章添加标签及分类\"></a>给文章添加标签及分类</h1><p>将需要置顶的文章打开，在文章的<code>Front-matter</code>中加上<code>categories:``tags:</code>即可。比如下面这样：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 记录：从零开始 搭建属于自己的blog</span><br><span class=\"line\"><span class=\"built_in\">date</span>: 2022-5-16 00:51:37</span><br><span class=\"line\">categories: </span><br><span class=\"line\">     - [<span class=\"string\">&quot;Github&quot;</span>]</span><br><span class=\"line\">     - [<span class=\"string\">&quot;Hexo&quot;</span>]</span><br><span class=\"line\">     - [<span class=\"string\">&quot;Blog&quot;</span>]</span><br><span class=\"line\">tags:  </span><br><span class=\"line\">     - 博客搭建</span><br><span class=\"line\">     - 学习笔记</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>其中categories项可通过添加或取消<code>[ ]</code>进行层级分级 例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">categories:</span><br><span class=\"line\">- 个人博客   <span class=\"comment\">#第一层级</span></span><br><span class=\"line\">- Hexo博客   <span class=\"comment\">#第二层级</span></span><br><span class=\"line\">tags:</span><br><span class=\"line\">- Hexo</span><br><span class=\"line\">- 博客</span><br></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">categories:</span><br><span class=\"line\">- [随想]   #同级</span><br><span class=\"line\">- [日记]   #同级</span><br></pre></td></tr></table></figure>\n<h1 id=\"将文章置顶\"><a href=\"#将文章置顶\" class=\"headerlink\" title=\"将文章置顶\"></a>将文章置顶</h1><p>在hexo根目录执行下列命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm uninstall hexo-generator-index --save</span><br><span class=\"line\">npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure>\n<p>然后在需要置顶的文章的<code>Front-matter</code>中加上<code>top: true</code>即可。比如下面这样：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 记录：从零开始 搭建属于自己的blog</span><br><span class=\"line\"><span class=\"built_in\">date</span>: 2022-5-16 00:51:37</span><br><span class=\"line\">categories: </span><br><span class=\"line\">     - [<span class=\"string\">&quot;Github&quot;</span>]</span><br><span class=\"line\">     - [<span class=\"string\">&quot;Hexo&quot;</span>]</span><br><span class=\"line\">     - [<span class=\"string\">&quot;Blog&quot;</span>]</span><br><span class=\"line\">tags:  </span><br><span class=\"line\">     - 博客搭建</span><br><span class=\"line\">     - 学习笔记</span><br><span class=\"line\">top: <span class=\"literal\">true</span></span><br><span class=\"line\">comments: <span class=\"literal\">false</span></span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>到目前为止，置顶功能已经可以实现了，但置顶的文章显示在最上面之后，并没有明确的置顶标志<br>打开：主题目录&#x2F;layout&#x2F;_macro 中的<code>post.swig</code>文件，定位到<code>&lt;div class=&quot;post-meta&quot;&gt;</code>标签下，插入如下代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% <span class=\"keyword\">if</span> post.top %&#125;</span><br><span class=\"line\">  &lt;i class=<span class=\"string\">&quot;fa fa-thumb-tack&quot;</span>&gt;&lt;/i&gt;</span><br><span class=\"line\">  &lt;font color=7D26CD&gt;置顶&lt;/font&gt;</span><br><span class=\"line\">  &lt;span class=<span class=\"string\">&quot;post-meta-divider&quot;</span>&gt;|&lt;/span&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n<p>一定注意添加位置不要插入在其他的&#96;</p>\n","categories":["Github","Hexo","Blog"],"tags":["博客搭建","学习笔记","博客优化"]}]