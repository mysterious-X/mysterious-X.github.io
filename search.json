[{"title":"记录：从零开始 搭建属于自己的blog","url":"/2022/05/16/create_blog/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>为什么要自己搭建博客?<br>你看技术大神们哪个没有自己的优秀博客<br>通过做笔记的方式对学习历程进行记录，对所学的知识形成⽂章也是对⾃⼰的交代<br>不懂技术的小伙伴也可以在自己的小天地写文，很爽又很有逼格是不是~</p>\n<p>用知乎、CSDN、博客园、简书等站点进行写作不行吗？<br>当然没问题啊，但是自行建站，一切都可以自己定制，毫无限制，你的地盘你做主<br>拥有属于自己的独立博客   自由，自在~<br>可以看看这篇文章：<a href=\"http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/\">刘未鹏 | Mind Hacks</a><br>更多请看 <a href=\"https://www.zhihu.com/question/19916345\">为什么要自建博客</a>？</p>\n<p>本站是通过Github托管+Hexo博客框架+Next主题搭建而来的<br>GitHub：一个静态站点托管服务+提供.github.io免费域名<br>Hexo：一个高效的博客框架<br>NexT：一个简约风格的网站主题</p>\n<p>Github+hexo搭建个人博客的相关的教程网上有很多，但每位技术大神都写的不太一样(还有受不同环境或版本的影响…)，所以我决定写下来记录一下我搭建的第一个博客的过程，包括我亲身踩过的一些坑orz…希望给和我一样的技术小白提供一些帮助。<br>最后，感谢互联网中提供帮助的各路大神。</p>\n<hr>\n<h1 id=\"搭建步骤概览\"><a href=\"#搭建步骤概览\" class=\"headerlink\" title=\"搭建步骤概览\"></a>搭建步骤概览</h1><ol>\n<li>第一部分 Github的安装及相关配置 <ul>\n<li>注册Github账号</li>\n<li>创建Repository #仓库</li>\n<li>安装Git</li>\n<li>将Git与GitHub账号绑定</li>\n</ul>\n</li>\n<li>第二部分 搭建Hexo博客 安装及相关配置<ul>\n<li>安装Node.js #依赖环境</li>\n<li>安装Hexo框架</li>\n<li>将博客部署到github.io #发布网站</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h1 id=\"Github的安装及相关配置\"><a href=\"#Github的安装及相关配置\" class=\"headerlink\" title=\"Github的安装及相关配置\"></a>Github的安装及相关配置</h1><h2 id=\"注册Github账号\"><a href=\"#注册Github账号\" class=\"headerlink\" title=\"注册Github账号\"></a>注册Github账号</h2><p>由于网站是托管在Github上的，所以首先需要创建Github的账户<br>访问<a href=\"/https://github.com/\">Github官网</a> 右上角<code>Sign up</code>开始创建</p>\n<h2 id=\"创建Repository-仓库\"><a href=\"#创建Repository-仓库\" class=\"headerlink\" title=\"创建Repository #仓库\"></a>创建Repository #仓库</h2><p>注册好Github账户后，继续创建用于托管网站的仓库，按目前的Github网页排版可点击<br><code>New</code>、<code>Start a project</code>、<code>New repository</code>这三个位置进行仓库的创建<br><img src=\"/images/create_blog/myblog1.png\" alt=\"图1\"><br>Repository 仓库名字的格式应该是 <code>username.github.io</code> 也就是你创建好博客后的域名<br>其中username保持与注册用户名一致<br>例如我的username是mysterious-X 仓库名则为<code>mysterious-X.github.io</code><br><img src=\"/images/create_blog/myblog2.png\" alt=\"图2\"><br>其余选项可以按需，博主是全部保持的默认，<br>最后下拉到底，点击<code>Creat repository</code>完成仓库创建</p>\n<h2 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h2><p>Git是什么？参照廖雪峰老师博客中的说法，Git是目前 主流的、开源的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。更多详细介绍可移步至此 <a href=\"https://www.liaoxuefeng.com/wiki/896043488029600/896202815778784\">Git的诞生</a><br>最简单的理解就是网站在本地搭建好后，需要使用Git同步到GitHub上进行托管及上线<br>很多博主在搭建时都推荐了<a href=\"https://www.liaoxuefeng.com/wiki/896043488029600/896067074338496\">廖雪峰老师的Git教程</a> 其中包括了linux、Mac OS、Windows的安装教程。<br>本博客是通过windows系统搭建的，但无奈廖老师的windows部分的教程选择的是默认安装…<br>而我又对众多的选项非常好奇，本着求知欲，所以又多找了几份关于Windows系统的，带图带翻译和详细步骤讲解的安装教程，可以对比着看。<br><a href=\"https://blog.csdn.net/mukes/article/details/115693833\">Git 详细安装教程1</a><br><a href=\"https://blog.csdn.net/weixin_44486583/article/details/122704375\">Git 详细安装教程2</a><br>Git官方windows版下载传送门→<a href=\"https://git-scm.com/download/win\">Git Download for Windows</a> </p>\n<h2 id=\"将Git与GitHub帐号绑定\"><a href=\"#将Git与GitHub帐号绑定\" class=\"headerlink\" title=\"将Git与GitHub帐号绑定\"></a>将Git与GitHub帐号绑定</h2><p>Git安装完成后在桌面任意位置右键菜单点击<code>Git Bash here</code>或者在菜单里搜索<code>Git Bash</code>并打开<br>设置user.name和user.email配置信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global user.name GitHub用户名</span><br></pre></td></tr></table></figure>\n<p>#输入你实际的github注册用户名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global user.email GitHub注册邮箱</span><br></pre></td></tr></table></figure>\n<p>#输入你实际的github注册邮箱</p>\n<p>生成SSH Key 密钥</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C GitHub注册邮箱</span><br></pre></td></tr></table></figure>\n<p>#输入你实际的github注册邮箱</p>\n<p>然后直接一键三连(三次回车)，默认不需要设置密码<br>最后看到这样的界面，就成功生成ssh key了<br><img src=\"/images/create_blog/myblog3.png\" alt=\"图3\"></p>\n<p>配置 SSH key 密钥<br>配置 SSH key 用来将本地git项目与github联系<br>找到生成 .ssh 密钥的文件夹(如上图中标记位置查看自己的，每个人的路径都不一样)，<br>将文件夹内名为<code>id_rsa.pub</code>的密钥内的全部内容复制，<br>#没找到的勾选一下文件扩展名 隐藏的项目<br>复制完后打开<a href=\"https://github.com/settings/keys\">GitHub_Settings_keys</a>页面，<br>#如链接失效，也可在github上点右上角头像下拉菜单 -&gt; 点击Settings -&gt; 左侧列表中点开SSH and GPG keys -&gt; 点击<code>New SSH key</code><br><img src=\"/images/create_blog/myblog4.png\" alt=\"图4\"><br><img src=\"/images/create_blog/myblog5.png\" alt=\"图5\"><br>Title：可以任意填写，我写的是myBlog<br>Key：将刚刚复制的<code>id_rsa.pub</code>密钥内容粘贴至此<br>点击<code>Add SSH key</code>完成<br>最后在Git Bash中检测GitHub公钥设置是否成功，<br>输入以下代码 不要改任何一个字 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh git@github.com</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/create_blog/myblog6.png\" alt=\"图6\"><br>如上则说明本机已成功连接到Github。<br>这里之所以设置GitHub密钥原因是，通过非对称加密的公钥与私钥来完成加密，公钥放置在GitHub上，私钥放置在自己的电脑里。GitHub要求每次推送代码都是合法用户，所以每次推送都需要输入账号密码验证推送用户是否是合法用户，为了省去每次输入密码的步骤，采用了ssh，当你推送的时候，git就会匹配你的私钥跟GitHub上面的公钥是否是配对的，若是匹配就认为你是合法用户，则允许推送。这样可以保证每次的推送都是正确合法的。</p>\n<h1 id=\"搭建Hexo博客-安装及相关配置\"><a href=\"#搭建Hexo博客-安装及相关配置\" class=\"headerlink\" title=\"搭建Hexo博客 安装及相关配置\"></a>搭建Hexo博客 安装及相关配置</h1><h2 id=\"安装Node-js-依赖环境\"><a href=\"#安装Node-js-依赖环境\" class=\"headerlink\" title=\"安装Node.js #依赖环境\"></a>安装Node.js #依赖环境</h2><p><code>Hexo</code>基于Node.js，会包含环境变量及npm的安装，下载<a href=\"https://link.zhihu.com/?target=https://nodejs.org/en/download/\">Node.js</a> 安装包并安装<br>安装后检测Node.js及npm是否安装成功，在命令行中输入 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">node -v</span><br><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/create_blog/myblog7.png\" alt=\"图7\"><br>如返回值如上，则Hexo的环境已全部搭建完毕。</p>\n<h2 id=\"安装Hexo框架\"><a href=\"#安装Hexo框架\" class=\"headerlink\" title=\"安装Hexo框架\"></a>安装Hexo框架</h2><p>环境准备好后，开始安装Hexo<br><code>Hexo</code>是个人博客网站的框架， 首先需要在自己的电脑里创建一个文件夹，例如<code>D:\\myblog\\mysterious-X.github.io\\</code><br>Hexo框架与以后你自己发布的网页都在这个文件夹中<br>此文件夹的名字博主是填写的自己的Repository仓库名</p>\n<p>#博主在之后访问搭建好的页面时，遇到了github.io页面404报错<br>重新搭建了环境并使 Github用户名、Repository仓库名、本地文件夹名 保持一致后解决的<br>所以如果是跟博主一样的新手的话，第一次搭建时可以保守起见，<br>将Github用户名、Repository仓库名、本地文件夹名  保持一致<br>相关资料可参考：<br><a href=\"https://blog.csdn.net/dajian790626/article/details/78595684\">https://blog.csdn.net/dajian790626/article/details/78595684</a><br><a href=\"http://www.jianshu.com/p/380290deb8f0\">http://www.jianshu.com/p/380290deb8f0</a></p>\n<p>创建好后，直接在该文件夹上右击<code>Git Bash Here</code><br>或进入文件夹内，空白地方右击鼠标点击<code>Git Bash Here</code><br><strong>提示</strong>：在进行博客搭建或之后进行优化修改工作时，每次使用命令都要在<code>此目录</code>下进行。<br>使用npm命令安装Hexo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli </span><br></pre></td></tr></table></figure>\n<p>安装完成后，初始化博客</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo init blog</span><br></pre></td></tr></table></figure>\n<p>现在已经搭建好本地的 Hexo 博客了，为了检测我们的网站雏形<br>分别按顺序输入以下三条命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new test_my_site</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n\n<p>三个命令依次是新建一篇博客文章、生成网页、在本地预览的操作。<br>完成后，打开浏览器输入地址：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">localhost:4000</span><br></pre></td></tr></table></figure>\n<p>这样我们就可以看到已经搭建好本地的博客了</p>\n<p><em><strong>常用的Hexo 命令</strong></em><br>hexo init              #初始化博客<br>hexo n 文章标题 #新建文章          hexo new 的简写<br>hexo g                #生成                 hexo generate 的简写<br>hexo s                #启动服务预览   hexo server 的简写<br>hexo d                #部署                 hexo deploy 的简写<br>hexo clean         #清除缓存，若网页正常情况下可忽略这条命令<br>之后每次修改配置文件或新建文章后都需要重新生成一下和部署到github上</p>\n<h2 id=\"将博客部署到github-io-发布网站\"><a href=\"#将博客部署到github-io-发布网站\" class=\"headerlink\" title=\"将博客部署到github.io #发布网站\"></a>将博客部署到github.io #发布网站</h2><p>上步中已经完成了站点的本地预览，接下来要做的就是将网站进行发布，这样可以让更多的人阅读到<br>在hexo框架中最主要的配置文件<code>_config.yml</code>也被称之为站点配置文件，<br>之后的一些站点配置和优化都会用到此文件。<br><img src=\"/images/create_blog/myblog8.png\" alt=\"图8\"><br>编辑站点配置文件，可以使用<code>nodepad++</code>打开<br>翻到末尾，找到deploy开头的地方，进行如下修改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\"><span class=\"built_in\">type</span>: git</span><br><span class=\"line\">repo: 这里填入你之前在GitHub上创建仓库的SSH</span><br><span class=\"line\">branch: master</span><br></pre></td></tr></table></figure>\n<p>repo的地址：进入 Github 个人主页中，点右上角头像中的<code>Repositories</code>，点进之前新建的项目中，点击<code>code</code>，复制新建的独立博客项目的 <code>SSH</code> 码，复制粘贴至站点文件<code>repo:</code> 的后面<br><strong>一定要注意语法，要用英文符号的<code>：</code>，所有的<code> ：</code> 后面必须加一个<code>空格</code>，不然会报错。</strong><br><img src=\"/images/create_blog/myblog9.png\" alt=\"图9\"><br><img src=\"/images/create_blog/myblog10.png\" alt=\"图10\"><br>修改完后保存退出。</p>\n<p>最后安装Git部署插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>此步是为了给hexo d·这个命令做相应的配置，让hexo知道你要把blog部署在哪个位置<br>安装完成后依次输入以下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo g </span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<p>完成后，打开浏览器，在地址栏输入你的放置个人网站的仓库路径，即 <a href=\"http://xxxx.github.io/\">http://xxxx.github.io</a><br>比如我的xxxx就是我的GitHub用户名: <a href=\"https://mysterious-x.github.io/\">mysterious-x.github.io</a><br>如果你发现你的博客与博主一样已经上线了，可以在网络上被访问到了。<br>那么….<br>           <em><strong>恭喜你~！你的博客已经搭建好啦！</strong></em></p>\n<p>至此，我的首个博客基础搭建部分就算完毕了，后续只需要通过一些简单的Markdown语法就可以快速生成一篇博客了。</p>\n<p>附：<br><em><strong>初识Markdown语法</strong></em><br>Markdown也是现在各博客平台比较主流的编辑语法，入门只要3-5分钟。<br>教程也是网上一抓一大把，在此我推荐几篇我个人认为比较简洁明了的，非常之好上手。<br>传送门1~  -&gt;  <a href=\"https://www.jianshu.com/p/191d1e21f7ed\">简书-Markdown基本语法</a><br>传送门2~  -&gt;  <a href=\"https://www.runoob.com/markdown/md-tutorial.html\">菜鸟教程-Markdown 教程</a><br>传送门3~  -&gt;  <a href=\"https://blog.csdn.net/afei__/article/details/80717153\">CSDN-Markdown语法介绍</a></p>\n<p>后续会对博客进行更多个性化的功能定制~<br>继续打造独一无二且只属于你的个性化博客~<br>详参下篇！~</p>\n<p><strong>参考文献</strong><br><a href=\"https://zhuanlan.zhihu.com/p/32957389\">技术小白搭建个人博客 github+hexo</a><br><a href=\"https://zhuanlan.zhihu.com/p/26625249\">GitHub+Hexo 搭建个人网站详细教程</a><br><a href=\"https://www.liaoxuefeng.com/wiki/896043488029600\">史上最浅显易懂的Git教程！</a></p>\n","categories":["Github","Hexo","Blog"],"tags":["博客搭建","学习笔记"]},{"title":"test","url":"/2022/05/19/test/","content":""},{"title":"Hexo + nexT主题 之 博客优化","url":"/2022/05/18/optimization_blog/","content":"<p>网上修改方案千千万，以下只针对我做过的优化项及我所踩过的坑进行列举<br>以下内容并非每一项都需要跟着做，只挑选个人认为有用或有意思的部分即可~</p>\n<h1 id=\"绑定个人域名\"><a href=\"#绑定个人域名\" class=\"headerlink\" title=\"绑定个人域名\"></a>绑定个人域名</h1><p>emm..关于个人域名的话，不绑定个人域名也完全没有问题，不会影响后续的任何使用<br>但是 引用博主<a href=\"http://wu.run/\">吴润 · RunDouble</a>的描述</p>\n<blockquote>\n<p>域名是网站的入口，也是网站的第一印象，比如饿了么的官网的域名是：<a href=\"https://www.ele.me/\">https://www.ele.me/</a> ，很是巧妙。常见的有com,cn,net,org等后缀，也有小众的xyz,me,io等后缀，根据你自己的喜好，选择不同的后缀，比如我选择就是常见的com后缀。很多小众奇特的后缀在大陆是没办法备案的，网站也就无法上线。然而使用GitHub托管我们的网站，完全不需要备案，因为托管我们的网站内容的服务器在美国，而且在国内备案流程也比较繁杂，时间需要一周左右。</p>\n</blockquote>\n<p>正如此博主最终选择的域名，亦是如此巧妙 <a href=\"http://wu.run/\">http://wu.run/</a></p>\n<p>所以我也决定进行效仿，启用一个自己的<code>个性化域名</code>。</p>\n<p>申请域名的地方有很多，国内比较主流的域名代理厂商有阿里云和腾讯云，<br>我选择的是从阿里云上购买域名并绑定：<a href=\"https://www.aliyun.com/\">阿里云-为了无法计算的价值</a> 申请入口：<a href=\"https://wanwang.aliyun.com/domain/\">域名注册</a><br>购买域名这也是我们整个搭建过程中惟一一个需要花钱的地方。如果你已经有了空闲域名就无需购买，直接使用即可。</p>\n<p>我在购买的时候只单纯购买了域名，不建议一次性购买太长时间例如5年10年虽然也不贵，但是毕竟第一次，7-10块钱买个一年的试试水，后续不喜欢了还可以随时更换。然后我是未增购任何增值服务，因为网站是托管在github上的所以也不需要备案等相关增值服务。后续如果自己有其他的需要可再自行增购。</p>\n<p>购买好域名后，登录到<a href=\"https://account.aliyun.com/login/login.htm\">阿里云</a>，进入<a href=\"https://dc.console.aliyun.com/\">管理控制台</a>找到域名列表，找到你购买的域名，进行实名认证，认证完毕后点击进入你购买的域名，点击域名解析<br><img src=\"/images/myblog11.png\" alt=\"图片11\"><br>点击添加记录，此时可以看到有一些选项需要我们填写，<br><img src=\"/images/myblog12.png\" alt=\"图片12\"><br>我这里一共添加了三条解析记录，可参考上图。<br>其中<code>解析路线</code>不用点进去选择，保持默认即可，<code>TTL</code>也保持默认，<br>需要修改的是 <code>记录类型</code>、<code>主机记录</code>、<code>记录值</code> 这三项<br>第一个主机记录的值我是通过ping自己的xxxx.github.io域名得出来的<br>第二个主机记录的值填写的是GitHub的地址是192.30.252.153<br>第三个记录类型是CNAME，CNAME的记录值是：<code>你的实际用户名.github.io</code></p>\n<blockquote>\n<p>在通过ping获取个人域名的ip时，意外发现cmd里的ping用不了了(之前都好的，突然就坏了，就离谱)最终定位到是系统变量值中未添加c:\\windows\\system32</p>\n</blockquote>\n<p>以上都添加好后登录回GitHub，进入之前创建的仓库，点击<code>Settings</code>，设置<code>Custom domain</code>，输入购买的域名，点<code>save</code>保存<br><img src=\"/images/myblog13.png\" alt=\"图片13\"><br>接着进入<strong>Hexo博客站点目录</strong>中的&#x2F;source目录下，创建一个记事本文件，将你购买的域名输入进去。<br><img src=\"/images/myblog14.png\" alt=\"图片14\"><br>保存，命名为<code>CNAME</code> ，注意保存成<code>所有文件</code>而不是<code>txt文件</code>。<br><img src=\"/images/myblog15.png\" alt=\"图片15\"><br>最后回到博客的<code>Hexo博客根目录</code>中，点击右键打开<code>Git bash here</code>命令行，依次输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<p>完成后打开浏览器在地址栏输入个性化域名就直接跳转到你自己搭建的网站上了。</p>\n<h1 id=\"修改网站相关信息\"><a href=\"#修改网站相关信息\" class=\"headerlink\" title=\"修改网站相关信息\"></a>修改网站相关信息</h1><p>在<code>Hexo博客站点目录</code>下，用sublime&#x2F;notepad++等文本编辑器打开站点配置文件<code>_config.yml</code>，修改参数信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">title: Mysterious-X的博客  #博客名</span><br><span class=\"line\">subtitle: 积跬步以至千里！  #副标题</span><br><span class=\"line\">description: myblog   #网页描述,给搜索引擎看的</span><br><span class=\"line\">author: Mr.X    #作者,在博客底部可以看到</span><br><span class=\"line\">language: zh-CN  #语言,不填则默认英文</span><br><span class=\"line\">timezone: Asia/Shanghai  #时区</span><br></pre></td></tr></table></figure>\n<p><code>language</code>和<code>timezone</code>都是有输入规范的，</p>\n<blockquote>\n<p>博主此处踩坑，后续将网站主题换为next后，中文页面失效了，<br>由于主题被从默认状态替换为了主题状态，所以调用的文件不一样了，主题会去调用自己的language文件，文件名可能是<code>zh-CN</code>或是<code>zh-Hans</code><br>例如<code>next</code>主题语言目录<strong>Blog&#x2F;themes&#x2F;next&#x2F;language</strong>中的就是<code>zh-Hans</code><br>后续又将站点配置文件中language: <code>zh-CN</code>改为了<code>zh-Hans</code>后恢复正常。</p>\n</blockquote>\n<h1 id=\"更换Hexo主题\"><a href=\"#更换Hexo主题\" class=\"headerlink\" title=\"更换Hexo主题\"></a>更换Hexo主题</h1><p>从此刻开始要明确注意区分配置文件位置<br>Hexo博客站点目录内的<code>_config.yml</code> 被称为<strong>站点配置文件</strong><br>Hexo博客站点目录&#x2F;themes&#x2F;主题目录&#x2F; 内的<code>_config.yml</code> 被称为<strong>主题配置文件</strong><br>例如next的主题配置文件位置：<strong>Hexo博客根目录&#x2F;themes&#x2F;next&#x2F;_config.yml</strong></p>\n<p><strong>这两个位置之后会经常用到，注意区分~！</strong></p>\n<p>博主是主题是NexT，其Github网址为：<a href=\"https://github.com/iissnan/hexo-theme-next\">iissnan&#x2F;hexo-theme-next</a><br>首先将NexT的主题源文件下载到本地，在<code>Hexo博客根目录内</code>使用Git克隆指令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n<p>将站点配置文件<code>_config.yml</code>用<code>Sublime/NotePad++</code>等文本编辑器打开,<br>在其中找到<code>theme</code>属性，将其由默认主题<code>landscape</code>改为<code>next</code>。<br>Hexo根目录执行部署Hexo指令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n<p>本地浏览器访问<code>localhost:4000</code>进行预览，预览出现问题的 可参考下一段落<code>安装next主题后页面乱码</code></p>\n<p>通过本地访问确认没问题以后再部署到github上</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<p>提交后便可以在互联网的博客上看到修改主题后的样式了。<code>gexo d</code> 提交后会有1-3分钟的延迟，看到站点没有第一时间更换过来不要着急！~<br>虽然上篇文章讲过，但是博主还是要再次强调，<br>之后的所有修改，无论配置文件或新建文章后都需要重新生成一下和部署到github上<br><code>hexo d</code>和<code>hexo s</code>，两者的区别在于，前者是将博客部署到远程的Github上，而后者是运行在本地，通过localhost:4000在浏览器中访问。后者是为了调试配置方便而使用，但是最终本地博客还是需要hexo deploy指令将其部署至Github上<br><strong>请牢记hexo g + hexo d 和hexo g + hexo s 这个两个组合~</strong><br>        生成 + 部署     生成 + 预览</p>\n<blockquote>\n<p>后续补充<br>博客优化了一多半之后，在某篇文章中了解到，好像是说 next 主题的源代码已经停止更新了，后续又被二次开发过了其他版本，其中博主用的多数搭建教程中推荐的默认地址是Next 5.1.4版本，会存在少量bug，但都已成功处理了，处理办法在下面的正文中也有写到，不多，3~4处吧。也比较好处理。<br>如果嫌麻烦的，也可以选择其他的next版本看看</p>\n</blockquote>\n<h1 id=\"安装next主题后页面乱码\"><a href=\"#安装next主题后页面乱码\" class=\"headerlink\" title=\"安装next主题后页面乱码\"></a>安装next主题后页面乱码</h1><p>本地预览后是一堆代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">“ &#123;% extends ‘_layout.swig‘ %&#125; &#123;% import ‘_macro/post.swig‘ as post_templa</span><br></pre></td></tr></table></figure>\n<p>查询到原因是hexo在5.0之后把swig给删除了需要自己手动安装<br><strong>解决方案</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i hexo-renderer-swig</span><br></pre></td></tr></table></figure>\n<p>参考文献：<a href=\"https://blog.csdn.net/qq_44774831/article/details/119278514\">https://blog.csdn.net/qq_44774831/article/details/119278514</a><br>成功解决</p>\n<h1 id=\"设置主题模式\"><a href=\"#设置主题模式\" class=\"headerlink\" title=\"设置主题模式\"></a>设置主题模式</h1><p>在Hexo主题中，有四种不同的模式，通过切换模式，让NexT主题显示不一样的样式。<br>Hexo博客站点目录&#x2F;themes&#x2F;next&#x2F;目录内找到<strong>主题配置文件</strong><code>_config.yml</code><br>在其中找到scheme属性</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Schemes</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Muse</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Mist</span></span><br><span class=\"line\">scheme: Pisces</span><br><span class=\"line\"><span class=\"comment\">#scheme: Gemini</span></span><br></pre></td></tr></table></figure>\n<p>NexT主题默认使用Muse模式，笔者采用的是Pisces模式，读者可逐一尝试后，根据自己的喜好选择其中一种模式，取消掉前面的#号注释即可。<br>不想逐一尝试的也可直接参考此篇文章中图片：<a href=\"https://afuya.blog.csdn.net/article/details/107424935?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-107424935-blog-104418517.pc_relevant_paycolumn_v3&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-107424935-blog-104418517.pc_relevant_paycolumn_v3&utm_relevant_index=1\">next主题添加背景动画</a></p>\n<h1 id=\"设置预览摘要\"><a href=\"#设置预览摘要\" class=\"headerlink\" title=\"设置预览摘要\"></a>设置预览摘要</h1><p>首页默认状态是显示所有文章的列表，和每一篇文章都显示所有内容，这样感觉看起来不舒服，这时候可以启用预览摘要模式</p>\n<p><strong>实现方法</strong></p>\n<p>修改主题配置文件: &#x2F;themes&#x2F;next&#x2F;_config.yml 找到<code>auto_excerpt</code>属性，将<code>enable</code>设置为<code>true</code> ，将<code>length</code>设置为想要预览到的字数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">auto_excerpt:</span><br><span class=\"line\">enable: true  #将原有的false改为true</span><br><span class=\"line\">length: 150   #设置预览的字数</span><br></pre></td></tr></table></figure>\n\n<p><strong>实现效果</strong><br>图</p>\n<h1 id=\"添加个人头像\"><a href=\"#添加个人头像\" class=\"headerlink\" title=\"添加个人头像\"></a>添加个人头像</h1><p><strong>实现方法</strong></p>\n<p>修改主题配置文件: &#x2F;themes&#x2F;next&#x2F;_config.yml 找到<code>avatar</code>字段,进行修改:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Sidebar Avatar</span></span><br><span class=\"line\"><span class=\"comment\"># in theme directory(source/images): /images/avatar.gif</span></span><br><span class=\"line\"><span class=\"comment\"># in site  directory(source/uploads): /uploads/avatar.gif</span></span><br><span class=\"line\">avatar: /images/head_icon.jpg</span><br></pre></td></tr></table></figure>\n<p>先将avatar字段前的#删除，然后粘贴上头像的目录位置或者链接。<br>博主是将头像图片保存在了主题目录下的source&#x2F;images文件夹，也可以存放在站点目录下的source&#x2F;uploads文件夹。也可以将自己的头像图片，保存在图床的某个地方，然后将对应的url地址复制过来，添加在avatar字段后即可。</p>\n<p><strong>实现效果</strong><br>图片</p>\n<h1 id=\"设置网站图标\"><a href=\"#设置网站图标\" class=\"headerlink\" title=\"设置网站图标\"></a>设置网站图标</h1><p><strong>实现方法</strong></p>\n<p>修改主题配置文件: &#x2F;themes&#x2F;next&#x2F;_config.yml ，找到以下字段，进行相应的修改：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Put your favicon.ico into `hexo-site/source/` directory.</span><br><span class=\"line\">favicon: /web_icon.jpg</span><br></pre></td></tr></table></figure>\n<p>其中，图片web_icon.jpg存放在source&#x2F;images目录下。</p>\n<p><strong>实现效果</strong><br>图</p>\n<h1 id=\"增加导航栏菜单选项\"><a href=\"#增加导航栏菜单选项\" class=\"headerlink\" title=\"增加导航栏菜单选项\"></a>增加导航栏菜单选项</h1><p>默认情况下，导航栏有首页、归档、关于三个选项，除此博主还添加了分类、标签和关于。</p>\n<p><strong>实现方法</strong></p>\n<p>修改主题配置文件: &#x2F;themes&#x2F;next&#x2F;_config.yml，找到<code>menu</code>属性，去掉<code>categories</code>、 <code>tags</code>、<code>about</code>前的 # 号注释，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">  home: / || home</span><br><span class=\"line\">  about: /about/ || user</span><br><span class=\"line\">  tags: /tags/ || tags</span><br><span class=\"line\">  categories: /categories/ || th</span><br><span class=\"line\">  archives: /archives/ || archive</span><br><span class=\"line\">  <span class=\"comment\">#schedule: /schedule/ || calendar</span></span><br><span class=\"line\">  <span class=\"comment\">#sitemap: /sitemap.xml || sitemap</span></span><br><span class=\"line\">  <span class=\"comment\">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure>\n<p>然后执行如下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new page <span class=\"string\">&quot;categories&quot;</span>   <span class=\"comment\">#添加分类页面</span></span><br><span class=\"line\">hexo new page <span class=\"string\">&quot;tags&quot;</span>         <span class=\"comment\">#添加标签页面</span></span><br><span class=\"line\">hexo new page <span class=\"string\">&quot;about&quot;</span>        <span class=\"comment\">#添加关于页面</span></span><br></pre></td></tr></table></figure>\n<p>执行完上述指令后，在Hexo根目录&#x2F;source&#x2F;文件夹下创建三个文件夹，命名分别为：categories、tags、about文件夹，在这些文件夹中分别会创建一个以index命名的Markdown文件，对这三个Markdown文件内容进行修改，使之分别为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">  title: 分类</span><br><span class=\"line\">  <span class=\"built_in\">date</span>: 2017-03-12 22:06:24</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">&quot;categories&quot;</span></span><br><span class=\"line\">  ---</span><br><span class=\"line\"></span><br><span class=\"line\">  ---</span><br><span class=\"line\">  title: 标签</span><br><span class=\"line\">  <span class=\"built_in\">date</span>: 2017-03-12 17:27:16</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">&quot;tags&quot;</span></span><br><span class=\"line\">  ---</span><br><span class=\"line\"></span><br><span class=\"line\">  ---</span><br><span class=\"line\">  title: 关于</span><br><span class=\"line\">  <span class=\"built_in\">date</span>: 2017-03-12 22:07:26</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">&quot;about&quot;</span></span><br><span class=\"line\">  ---</span><br></pre></td></tr></table></figure>\n<p>完成文件的修改，然后重新部署Hexo即可完成菜单选项的添加。</p>\n<h1 id=\"给文章添加标签及分类\"><a href=\"#给文章添加标签及分类\" class=\"headerlink\" title=\"给文章添加标签及分类\"></a>给文章添加标签及分类</h1><h1 id=\"将文章置顶\"><a href=\"#将文章置顶\" class=\"headerlink\" title=\"将文章置顶\"></a>将文章置顶</h1><h1 id=\"修复-导航栏选项跳转异常\"><a href=\"#修复-导航栏选项跳转异常\" class=\"headerlink\" title=\"修复-导航栏选项跳转异常\"></a>修复-导航栏选项跳转异常</h1><p>点击标签、分类、关于时遇到Cannot GET&#x2F;xxx错误时<br><strong>解决办法</strong><br>修改主题配置文件<code>_config.yml</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">  home: /|| home</span><br><span class=\"line\">  categories: /categories/|| th</span><br><span class=\"line\">  archives: /archives/|| archive</span><br><span class=\"line\">  about: /about/|| user</span><br><span class=\"line\">  <span class=\"comment\">#tags: /tags/ || tags</span></span><br><span class=\"line\">  <span class=\"comment\">#schedule: /schedule/ || calendar</span></span><br><span class=\"line\">  <span class=\"comment\">#sitemap: /sitemap.xml || sitemap</span></span><br><span class=\"line\">  <span class=\"comment\">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure>\n<p>注意此next版本配置文件中默认 &#x2F;与||之间是有空格的，把空格删除即可。</p>\n<h1 id=\"添加导航选项搜索功能\"><a href=\"#添加导航选项搜索功能\" class=\"headerlink\" title=\"添加导航选项搜索功能\"></a>添加导航选项搜索功能</h1><p>博客的本地根目录打开git bash 输入以下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>\n<p>然后打开站点配置文件，添加以下代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Search Config</span><br><span class=\"line\">search:</span><br><span class=\"line\">  path: search.json</span><br><span class=\"line\">  field: post</span><br><span class=\"line\">  format: html</span><br><span class=\"line\">  limit: 1000</span><br></pre></td></tr></table></figure>\n<p>打开主题配置文件，搜索local_search，修改以下代码,把enable的false改为true</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Local Search</span><br><span class=\"line\"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span><br><span class=\"line\">local_search:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  # If auto, trigger search by changing input.</span><br><span class=\"line\">  # If manual, trigger search by pressing enter key or search button.</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"菜单标签页添加彩色标签\"><a href=\"#菜单标签页添加彩色标签\" class=\"headerlink\" title=\"菜单标签页添加彩色标签\"></a>菜单标签页添加彩色标签</h1><p><a href=\"https://blog.csdn.net/qq_39974578/article/details/114172260\">https://blog.csdn.net/qq_39974578/article/details/114172260</a></p>\n<h1 id=\"设置侧边栏显示效果\"><a href=\"#设置侧边栏显示效果\" class=\"headerlink\" title=\"设置侧边栏显示效果\"></a>设置侧边栏显示效果</h1><p>在next主题配置文件display属性有四种显示模式</p>\n<p><strong>实现方法</strong><br>打开主题配置文件找到Sidebar Display字段，display属性有四种显示模式分别为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#display: post    #默认显示方式</span><br><span class=\"line\">#display: always  #一直显示</span><br><span class=\"line\">display: hide     #初始隐藏</span><br><span class=\"line\">#display: remove  #移除侧边栏</span><br></pre></td></tr></table></figure>\n<p>博主设置的是hide模式，可根据个人喜好进行设置，将需要的模式前#号注释删除即可。</p>\n<h1 id=\"设置站点概览中的名字及简介\"><a href=\"#设置站点概览中的名字及简介\" class=\"headerlink\" title=\"设置站点概览中的名字及简介\"></a>设置站点概览中的名字及简介</h1><p>站点概览的下方，也就是头像下面的位置，此处的名字和简介博主找了好久修改方法，最后发现侧边栏作者名调用的是theme.author也就是主题配置文件， 不是在站点配置文件…<br><strong>实现方法</strong><br>#需要在主题目录配置里单独添加 author、description 选项，可添加到主题配置文件的末尾，<br>注意格式！ : 后要加空格再写正文</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">author: Mr. X   <span class=\"comment\">#可以写你自己的博主名</span></span><br><span class=\"line\">description: 一个不会写代码的码农  <span class=\"comment\">#写一句话的描述</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"修复-边栏头像下面日志链接错误\"><a href=\"#修复-边栏头像下面日志链接错误\" class=\"headerlink\" title=\"修复-边栏头像下面日志链接错误\"></a>修复-边栏头像下面日志链接错误</h1><p>记录下出现的 问题：日志出现<code>Cannot GET /archives/%7C%7C%20list/</code>问题</p>\n<p>综合了网上的解决办法：</p>\n<p>1、主题配置文件内，将archives：&#x2F;archives&#x2F; || archive 改成archives：&#x2F;archives&#x2F;<br>删掉后面的||archive，的确能够解决问题，但是就没有图标了</p>\n<p>2、也是我后来采用的方法。<br>next(主题目录)&#x2F;layout&#x2F;_macro&#x2F;sidebar.swig文件中找到</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;a href=<span class=\"string\">&quot;&#123;&#123; url_for(theme.menu.archives).split(&#x27;||&#x27;)[0] | trim &#125;&#125;&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>发现原因是url_for函数将||转码了，<br>将以上代码替换为以下即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;&#123;&#123; url_for(config.archive_dir) | trim &#125;&#125;&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"开启文章字数统计\"><a href=\"#开启文章字数统计\" class=\"headerlink\" title=\"开启文章字数统计\"></a>开启文章字数统计</h1><p>显示每篇文章字数<br>实现方法<br>首先安装插件，执行以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure>\n<p>然后修改主题配置文件 ，定位到post_wordcount，将wordcount由false改为true即可。</p>\n<h1 id=\"底栏站点文章总字数\"><a href=\"#底栏站点文章总字数\" class=\"headerlink\" title=\"底栏站点文章总字数\"></a>底栏站点文章总字数</h1><p>修改 themes&#x2F;next&#x2F;layout&#x2F;_partials&#x2F;footer.swig文件的最后添加如下内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div class=“theme-info”&gt;</span><br><span class=\"line\">&lt;div class=“powered-by”&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;span class=“post-count”&gt;共&#123;&#123; totalcount(site) &#125;&#125;字&lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"站点访问量统计\"><a href=\"#站点访问量统计\" class=\"headerlink\" title=\"站点访问量统计\"></a>站点访问量统计</h1><p>进入 hexo 博客项目的 themes 目录下，在 next 主题目录中的 layout&#x2F;_third-party&#x2F;analytics&#x2F; 下找到 busuanzi-counter.swig 文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script async src=&quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">把上面的这个换成下面的这个</span><br><span class=\"line\">&lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>然后打开\\themes\\next\\layout_partials\\footer.swig文件，在合适的位置添加以下代码，博主是添加在了末尾</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;powered-by&quot;&gt;</span><br><span class=\"line\">&lt;i class=&quot;fa fa-user-md&quot;&gt;&lt;/i&gt;&lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;</span><br><span class=\"line\">    本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次</span><br><span class=\"line\">&lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"设置文章内链接为蓝色\"><a href=\"#设置文章内链接为蓝色\" class=\"headerlink\" title=\"设置文章内链接为蓝色\"></a>设置文章内链接为蓝色</h1><p>修改原因<br>链接的默认颜色是白色的，和普通字体颜色相同，不容易区分<br>修改方法<br>通过路径：Hexo\\themes\\next\\source\\css_common\\components\\post<br>打开post.styl文件，在文件中添加以下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">.post-body p a&#123;</span><br><span class=\"line\">    color: #0593d3;</span><br><span class=\"line\">    border-bottom: none;</span><br><span class=\"line\">    &amp;:hover &#123;</span><br><span class=\"line\">      color: #0477ab;</span><br><span class=\"line\">      text-decoration: underline;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>建议将代码添加到原文件内容的底部，便于查看</p>\n<h1 id=\"添加友情链接功能\"><a href=\"#添加友情链接功能\" class=\"headerlink\" title=\"添加友情链接功能\"></a>添加友情链接功能</h1><p>在主题配置文件 中找到links属性，修改links_title属性的值为“友情链接”（也可以是其他文案），取消注释links:，然后添加上好友的博客名称和博客地址，其格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Blog rolls</span><br><span class=\"line\">links_title: 友情链接  #修改名称</span><br><span class=\"line\">#links_layout: block</span><br><span class=\"line\">#links_layout: inline</span><br><span class=\"line\">links:   #该行取消注释</span><br><span class=\"line\">  知乎: http://my.zhihu</span><br><span class=\"line\">  CSDN: http://my.csdn</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"添加动态背景\"><a href=\"#添加动态背景\" class=\"headerlink\" title=\"添加动态背景\"></a>添加动态背景</h1><p><strong>实现方法</strong></p>\n<p>在主题配置文件中，定位到如下部分：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Canvas-nest</span><br><span class=\"line\">canvas_nest: true</span><br><span class=\"line\"></span><br><span class=\"line\"># three_waves</span><br><span class=\"line\">three_waves: false</span><br><span class=\"line\"></span><br><span class=\"line\"># canvas_lines</span><br><span class=\"line\">canvas_lines: false</span><br><span class=\"line\"></span><br><span class=\"line\"># canvas_sphere</span><br><span class=\"line\">canvas_sphere: false</span><br><span class=\"line\"></span><br><span class=\"line\"># Only fit scheme Pisces</span><br><span class=\"line\"># Canvas-ribbon</span><br><span class=\"line\">canvas_ribbon: false</span><br></pre></td></tr></table></figure>\n<p>这是已经集成好的几个动态效果，笔者采用的是canvas_nest，读者可依次体验(将false改为true)，选择最喜欢的动态背景。</p>\n<h1 id=\"底部栏小心心\"><a href=\"#底部栏小心心\" class=\"headerlink\" title=\"底部栏小心心\"></a>底部栏小心心</h1><p>打开主题配置文件，搜索footer，修改icon参数为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Icon between year and copyright info.</span><br><span class=\"line\">icon: heart</span><br></pre></td></tr></table></figure>\n<p>更多ico图标参见：<a href=\"https://fontawesome.com/v4/icons/\">The Icons</a></p>\n<h1 id=\"修改文章底部的-号标签\"><a href=\"#修改文章底部的-号标签\" class=\"headerlink\" title=\"修改文章底部的#号标签\"></a>修改文章底部的#号标签</h1><p><strong>实现方法</strong></p>\n<p>修改模板&#x2F;themes&#x2F;next&#x2F;layout&#x2F;_macro&#x2F;post.swig，搜索 rel&#x3D;”tag”&gt;#，将其中的 <code>#</code> 换成<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p>\n<h1 id=\"鼠标轨迹特效\"><a href=\"#鼠标轨迹特效\" class=\"headerlink\" title=\"鼠标轨迹特效\"></a>鼠标轨迹特效</h1><p><strong>实现方法</strong><br>在\\themes\\next\\source\\js\\中新建fairyDustCursor.js文件，并添加以下代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(function fairyDustCursor() &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  var possibleColors = [&quot;#D61C59&quot;, &quot;#E7D84B&quot;, &quot;#1B8798&quot;]</span><br><span class=\"line\">  var width = window.innerWidth;</span><br><span class=\"line\">  var height = window.innerHeight;</span><br><span class=\"line\">  var cursor = &#123;x: width/2, y: width/2&#125;;</span><br><span class=\"line\">  var particles = [];</span><br><span class=\"line\">  </span><br><span class=\"line\">  function init() &#123;</span><br><span class=\"line\">    bindEvents();</span><br><span class=\"line\">    loop();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  // Bind events that are needed</span><br><span class=\"line\">  function bindEvents() &#123;</span><br><span class=\"line\">    document.addEventListener(&#x27;mousemove&#x27;, onMouseMove);</span><br><span class=\"line\">    document.addEventListener(&#x27;touchmove&#x27;, onTouchMove);</span><br><span class=\"line\">    document.addEventListener(&#x27;touchstart&#x27;, onTouchMove);</span><br><span class=\"line\">    </span><br><span class=\"line\">    window.addEventListener(&#x27;resize&#x27;, onWindowResize);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  function onWindowResize(e) &#123;</span><br><span class=\"line\">    width = window.innerWidth;</span><br><span class=\"line\">    height = window.innerHeight;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  function onTouchMove(e) &#123;</span><br><span class=\"line\">    if( e.touches.length &gt; 0 ) &#123;</span><br><span class=\"line\">      for( var i = 0; i &lt; e.touches.length; i++ ) &#123;</span><br><span class=\"line\">        addParticle( e.touches[i].clientX, e.touches[i].clientY, possibleColors[Math.floor(Math.random()*possibleColors.length)]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  function onMouseMove(e) &#123;    </span><br><span class=\"line\">    cursor.x = e.clientX;</span><br><span class=\"line\">    cursor.y = e.clientY;</span><br><span class=\"line\">    </span><br><span class=\"line\">    addParticle( cursor.x, cursor.y, possibleColors[Math.floor(Math.random()*possibleColors.length)]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  function addParticle(x, y, color) &#123;</span><br><span class=\"line\">    var particle = new Particle();</span><br><span class=\"line\">    particle.init(x, y, color);</span><br><span class=\"line\">    particles.push(particle);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  function updateParticles() &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    for( var i = 0; i &lt; particles.length; i++ ) &#123;</span><br><span class=\"line\">      particles[i].update();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    for( var i = particles.length -1; i &gt;= 0; i-- ) &#123;</span><br><span class=\"line\">      if( particles[i].lifeSpan &lt; 0 ) &#123;</span><br><span class=\"line\">        particles[i].die();</span><br><span class=\"line\">        particles.splice(i, 1);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  function loop() &#123;</span><br><span class=\"line\">    requestAnimationFrame(loop);</span><br><span class=\"line\">    updateParticles();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  function Particle() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    this.character = &quot;*&quot;;</span><br><span class=\"line\">    this.lifeSpan = 120; //ms</span><br><span class=\"line\">    this.initialStyles =&#123;</span><br><span class=\"line\">      &quot;position&quot;: &quot;fixed&quot;,</span><br><span class=\"line\">      &quot;top&quot;: &quot;0&quot;, //必须加</span><br><span class=\"line\">      &quot;display&quot;: &quot;block&quot;,</span><br><span class=\"line\">      &quot;pointerEvents&quot;: &quot;none&quot;,</span><br><span class=\"line\">      &quot;z-index&quot;: &quot;10000000&quot;,</span><br><span class=\"line\">      &quot;fontSize&quot;: &quot;20px&quot;,</span><br><span class=\"line\">      &quot;will-change&quot;: &quot;transform&quot;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    this.init = function(x, y, color) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      this.velocity = &#123;</span><br><span class=\"line\">        x:  (Math.random() &lt; 0.5 ? -1 : 1) * (Math.random() / 2),</span><br><span class=\"line\">        y: 1</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      </span><br><span class=\"line\">      this.position = &#123;x: x - 10, y: y - 20&#125;;</span><br><span class=\"line\">      this.initialStyles.color = color;</span><br><span class=\"line\">      console.log(color);</span><br><span class=\"line\"></span><br><span class=\"line\">      this.element = document.createElement(&#x27;span&#x27;);</span><br><span class=\"line\">      this.element.innerHTML = this.character;</span><br><span class=\"line\">      applyProperties(this.element, this.initialStyles);</span><br><span class=\"line\">      this.update();</span><br><span class=\"line\">      </span><br><span class=\"line\">      document.body.appendChild(this.element);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    this.update = function() &#123;</span><br><span class=\"line\">      this.position.x += this.velocity.x;</span><br><span class=\"line\">      this.position.y += this.velocity.y;</span><br><span class=\"line\">      this.lifeSpan--;</span><br><span class=\"line\">      </span><br><span class=\"line\">      this.element.style.transform = &quot;translate3d(&quot; + this.position.x + &quot;px,&quot; + this.position.y + &quot;px,0) scale(&quot; + (this.lifeSpan / 120) + &quot;)&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    this.die = function() &#123;</span><br><span class=\"line\">      this.element.parentNode.removeChild(this.element);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  function applyProperties( target, properties ) &#123;</span><br><span class=\"line\">    for( var key in properties ) &#123;</span><br><span class=\"line\">      target.style[ key ] = properties[ key ];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  init();</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>然后在\\themes\\next\\layout_layout.swig 文件里尾部 body前添加引用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">  &#123;% include &#x27;_custom/custom.swig&#x27; %&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;!-- 鼠标移动特效 --&gt;</span><br><span class=\"line\">  &#123;% if theme.sakura.enable %&#125;</span><br><span class=\"line\">      &lt;script async src=&quot;/js/cursor/fairyDustCursor.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &#123;% endif %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>最后在主题配置文件末尾添加以下三行代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 鼠标移动特效</span><br><span class=\"line\">sakura:</span><br><span class=\"line\">  enable: true</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"鼠标点击特效\"><a href=\"#鼠标点击特效\" class=\"headerlink\" title=\"鼠标点击特效\"></a>鼠标点击特效</h1><p><a href=\"https://blog.csdn.net/qq_40590778/article/details/104662040\">https://blog.csdn.net/qq_40590778/article/details/104662040</a><br><a href=\"https://tding.top/archives/58cff12b.html\">https://tding.top/archives/58cff12b.html</a></p>\n<h1 id=\"自定义鼠标样式\"><a href=\"#自定义鼠标样式\" class=\"headerlink\" title=\"自定义鼠标样式\"></a>自定义鼠标样式</h1><p>实现方法</p>\n<p>打开themes&#x2F;next&#x2F;source&#x2F;css&#x2F;_custom&#x2F;custom.styl,在里面写下如下代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 鼠标样式</span><br><span class=\"line\">  * &#123;</span><br><span class=\"line\">      cursor: url(&quot;http://om8u46rmb.bkt.clouddn.com/sword2.ico&quot;),auto!important</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  :active &#123;</span><br><span class=\"line\">      cursor: url(&quot;http://om8u46rmb.bkt.clouddn.com/sword1.ico&quot;),auto!important</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>其中 url 里面必须是 ico 图片，ico图片可以上传到网上，然后获取外链，复制到 url 里就行了</p>\n<h1 id=\"养个2D老婆或宠物…\"><a href=\"#养个2D老婆或宠物…\" class=\"headerlink\" title=\"养个2D老婆或宠物…\"></a>养个2D老婆或宠物…</h1><p><a href=\"https://www.cnblogs.com/wangyuehan/p/9860371.html\">https://www.cnblogs.com/wangyuehan/p/9860371.html</a><br><a href=\"https://huaji8.top/post/live2d-plugin-2.0/\">https://huaji8.top/post/live2d-plugin-2.0/</a></p>\n<h1 id=\"代码块样式自定义\"><a href=\"#代码块样式自定义\" class=\"headerlink\" title=\"代码块样式自定义\"></a>代码块样式自定义</h1><p>实现方法<br>打开\\themes\\next\\source\\css_custom\\custom.styl,向里面加入：(颜色可以自己定义)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// Custom styles.</span><br><span class=\"line\">code &#123;</span><br><span class=\"line\">    color: #ff7600;</span><br><span class=\"line\">    background: #fbf7f8;</span><br><span class=\"line\">    margin: 2px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 大代码块的自定义样式</span><br><span class=\"line\">.highlight, pre &#123;</span><br><span class=\"line\">    margin: 5px 0;</span><br><span class=\"line\">    padding: 5px;</span><br><span class=\"line\">    border-radius: 3px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.highlight, code, pre &#123;</span><br><span class=\"line\">    border: 1px solid #d6d6d6;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>实现效果图</strong></p>\n<h1 id=\"设置代码高亮主题\"><a href=\"#设置代码高亮主题\" class=\"headerlink\" title=\"设置代码高亮主题\"></a>设置代码高亮主题</h1><p>NexT 使用 Tomorrow Theme 作为代码高亮，共有5款主题供你选择。 NexT 默认使用的是 白色的 normal 主题，可选的值有 normal，night， night blue， night bright， night eighties<br>更改 主题配置文件highlight_theme 字段，将其值设定成你所喜爱的高亮主题，例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Code Highlight theme</span><br><span class=\"line\"># Available value: normal | night | night eighties | night blue | night bright</span><br><span class=\"line\"># https://github.com/chriskempson/tomorrow-theme</span><br><span class=\"line\">highlight_theme: normal</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"一键复制代码功能\"><a href=\"#一键复制代码功能\" class=\"headerlink\" title=\"一键复制代码功能\"></a>一键复制代码功能</h1><p><strong>实现方法</strong><br>themes&#x2F;next&#x2F;layout&#x2F;_third-party&#x2F;下新建文件<code>copy-code.swig</code><br>粘贴以下代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% if theme.codeblock.copy_button.enable %&#125;</span><br><span class=\"line\">  &lt;style&gt;</span><br><span class=\"line\">    .copy-btn &#123;</span><br><span class=\"line\">      display: inline-block;</span><br><span class=\"line\">      padding: 6px 12px;</span><br><span class=\"line\">      font-size: 13px;</span><br><span class=\"line\">      font-weight: 700;</span><br><span class=\"line\">      line-height: 20px;</span><br><span class=\"line\">      color: #4D4D4C;</span><br><span class=\"line\">      white-space: nowrap;</span><br><span class=\"line\">      vertical-align: middle;</span><br><span class=\"line\">      cursor: pointer;</span><br><span class=\"line\">      background-color: #F7F7F7;</span><br><span class=\"line\">      background-image: linear-gradient(#F7F7F7, #F7F7F7);</span><br><span class=\"line\">      border: 1px solid #d5d5d5;</span><br><span class=\"line\">      border-radius: 3px;</span><br><span class=\"line\">      user-select: none;</span><br><span class=\"line\">      outline: 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .highlight-wrap .copy-btn &#123;</span><br><span class=\"line\">      transition: opacity .3s ease-in-out;</span><br><span class=\"line\">      opacity: 0;</span><br><span class=\"line\">      padding: 2px 6px;</span><br><span class=\"line\">      position: absolute;</span><br><span class=\"line\">      right: 4px;</span><br><span class=\"line\">      top: 8px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .highlight-wrap:hover .copy-btn,</span><br><span class=\"line\">    .highlight-wrap .copy-btn:focus &#123;</span><br><span class=\"line\">      opacity: 1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .highlight-wrap &#123;</span><br><span class=\"line\">      position: relative;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    $(&#x27;.highlight&#x27;).each(function (i, e) &#123;</span><br><span class=\"line\">      var $wrap = $(&#x27;&lt;div&gt;&#x27;).addClass(&#x27;highlight-wrap&#x27;)</span><br><span class=\"line\">      $(e).after($wrap)</span><br><span class=\"line\">      $wrap.append($(&#x27;&lt;button&gt;&#x27;).addClass(&#x27;copy-btn&#x27;).append(&#x27;&#123;&#123;__(&quot;post.copy_button&quot;)&#125;&#125;&#x27;).on(&#x27;click&#x27;, function (e) &#123;</span><br><span class=\"line\">        var code = $(this).parent().find(&#x27;.code&#x27;).find(&#x27;.line&#x27;).map(function (i, e) &#123;</span><br><span class=\"line\">          return $(e).text()</span><br><span class=\"line\">        &#125;).toArray().join(&#x27;\\n&#x27;)</span><br><span class=\"line\">        var ta = document.createElement(&#x27;textarea&#x27;)</span><br><span class=\"line\">        document.body.appendChild(ta)</span><br><span class=\"line\">        ta.style.position = &#x27;absolute&#x27;</span><br><span class=\"line\">        ta.style.top = &#x27;0px&#x27;</span><br><span class=\"line\">        ta.style.left = &#x27;0px&#x27;</span><br><span class=\"line\">        ta.value = code</span><br><span class=\"line\">        ta.select()</span><br><span class=\"line\">        ta.focus()</span><br><span class=\"line\">        var result = document.execCommand(&#x27;copy&#x27;)</span><br><span class=\"line\">        document.body.removeChild(ta)</span><br><span class=\"line\">        &#123;% if theme.codeblock.copy_button.show_result %&#125;</span><br><span class=\"line\">          if(result)$(this).text(&#x27;&#123;&#123;__(&quot;post.copy_success&quot;)&#125;&#125;&#x27;)</span><br><span class=\"line\">          else $(this).text(&#x27;&#123;&#123;__(&quot;post.copy_failure&quot;)&#125;&#125;&#x27;)</span><br><span class=\"line\">        &#123;% endif %&#125;</span><br><span class=\"line\">        $(this).blur()</span><br><span class=\"line\">      &#125;)).on(&#x27;mouseleave&#x27;, function (e) &#123;</span><br><span class=\"line\">        var $b = $(this).find(&#x27;.copy-btn&#x27;)</span><br><span class=\"line\">        setTimeout(function () &#123;</span><br><span class=\"line\">          $b.text(&#x27;&#123;&#123;__(&quot;post.copy_button&quot;)&#125;&#125;&#x27;)</span><br><span class=\"line\">        &#125;, 300)</span><br><span class=\"line\">      &#125;).append(e)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &lt;/script&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>编辑themes&#x2F;next&#x2F;layout&#x2F;_layout.swig文件，在文件末尾body前的位置添加一行代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">  &#123;% include &#x27;_third-party/scroll-cookie.swig&#x27; %&#125;</span><br><span class=\"line\">  &#123;% include &#x27;_third-party/exturl.swig&#x27; %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;% include &#x27;_third-party/copy-code.swig&#x27; %&#125;  #要加入的代码</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>在themes&#x2F;next&#x2F;languages&#x2F;zh-Hans.yml文件的post板块中任意位置添加下列代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">copy_button: 复制</span><br><span class=\"line\">copy_success: 复制成功</span><br><span class=\"line\">copy_failure: 复制失败</span><br></pre></td></tr></table></figure>\n<p>我是添加在了这里，注意是post板块中，注意格式前面有两个空格，还有不要插入到其他的子列表里。<br>如图</p>\n<p>最后在主题配置文件中添加开关，编辑主题配置文件，添加codeblock模块及添加copy_button的开关，next 5.1.4默认是没有codeblock模块的需要手动添加以下代码，添加在配置文件的末尾即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">codeblock:</span><br><span class=\"line\">  border_radius:</span><br><span class=\"line\">  copy_button:</span><br><span class=\"line\">    enable: true</span><br><span class=\"line\">    # Show text copy result</span><br><span class=\"line\">    show_result: true</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"文章插入本地图片\"><a href=\"#文章插入本地图片\" class=\"headerlink\" title=\"文章插入本地图片\"></a>文章插入本地图片</h1><p>写文章时发现上传的博客文章里面的本地图片居然显示不来，通过查看连接发现原因是url_for函数将||转码了<br><strong>实现方法</strong><br>打开站点配置文件<code>_config.yml</code> 找到<code>post_asset_folder</code>字段，设置值为true</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">post_asset_folder: true</span><br></pre></td></tr></table></figure>\n<p>安装可以上传本地图片的插件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install https://github.com/EricGerry/hexo-asset-image-0.0.5.git --save</span><br></pre></td></tr></table></figure>\n<p>注意不要用<code>npm install hexo-asset-image --save</code>进行安装，版本号不对。</p>\n<p>之后再运行hexo n xxxx来生成md博文时，&#x2F;source&#x2F;_posts文件夹内除了xxxx.md文件还有一个同名的xxx文件夹<br>此时将想要在xxxx.md中插入的图片复制到xxxx这个文件夹中，然后只需要在xxxx.md中按照markdown的格式引入图片：<img src=\"/xxxx/xxxx.jpg\" alt=\"图片名称\"> 就可以显示了</p>\n<h1 id=\"寻找图床\"><a href=\"#寻找图床\" class=\"headerlink\" title=\"寻找图床\"></a>寻找图床</h1><p>图床，当博文中有图片时，若是少量图片，可以直接把图片存放在source文件夹中，但图片会占据大量的存储的空间，加载的时候相对缓慢 ，这时考虑把博文里的图片上传到某一网站，然后获得外部链接，使用Markdown语法，<code>![图片信息](外部链接)</code>  完成图片的插入，这种网站就被成为图床。常见的简易的图床网站有：贴图库图片外链 、阿里云图床、新浪微博和七牛云 ，使用方法可以参看其他文章。图床最重要的就是稳定速度快，所以在挑选图床的时候一定要仔细</p>\n<h1 id=\"在每一篇文章后加本文结束的标记\"><a href=\"#在每一篇文章后加本文结束的标记\" class=\"headerlink\" title=\"在每一篇文章后加本文结束的标记\"></a>在每一篇文章后加本文结束的标记</h1><p><strong>实现方法</strong><br>在路径 \\themes\\next\\layout_macro 中新建 passage-end-tag.swig 文件,并添加以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &#123;% if not is_index %&#125;</span><br><span class=\"line\">        &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px; margin-top:10px&quot;&gt;-------------本文结束---感谢您的阅读-------------&lt;/div&gt;</span><br><span class=\"line\">    &#123;% endif %&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>接着打开\\themes\\next\\layout_macro\\post.swig文件,找到<code>END POST BODY</code>字段，将下方代码插入到END POST BODY后<br>示意如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;#####################&#125;</span><br><span class=\"line\">&#123;### END POST BODY ###&#125;</span><br><span class=\"line\">&#123;#####################&#125;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &#123;% if not is_index %&#125;</span><br><span class=\"line\">        &#123;% include &#x27;passage-end-tag.swig&#x27; %&#125;</span><br><span class=\"line\">      &#123;% endif %&#125;</span><br><span class=\"line\">    &lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>最后打开主题配置文件<code>_config.yml</code>，在末尾添加以下三行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 文章末尾添加“本文结束”标记</span><br><span class=\"line\">passage_end_tag:</span><br><span class=\"line\">  enabled: true</span><br></pre></td></tr></table></figure>\n<p><strong>实现效果</strong><br>图</p>\n<h1 id=\"在网站底部加上访问量\"><a href=\"#在网站底部加上访问量\" class=\"headerlink\" title=\"在网站底部加上访问量\"></a>在网站底部加上访问量</h1><p><strong>实现方法</strong></p>\n<h1 id=\"Hexo博客收录百度和谷歌-基于Next主题\"><a href=\"#Hexo博客收录百度和谷歌-基于Next主题\" class=\"headerlink\" title=\"Hexo博客收录百度和谷歌-基于Next主题\"></a>Hexo博客收录百度和谷歌-基于Next主题</h1><p><a href=\"https://www.jianshu.com/p/8c0707ce5da4\">https://www.jianshu.com/p/8c0707ce5da4</a></p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a href=\"http://theme-next.iissnan.com/theme-settings.html\">http://theme-next.iissnan.com/theme-settings.html</a><br><a href=\"https://qwerty200696.github.io/2017/09/09/blog-opti/\">https://qwerty200696.github.io/2017/09/09/blog-opti/</a><br><a href=\"https://blog.csdn.net/awt_fudonglai/category_10191857.html\">https://blog.csdn.net/awt_fudonglai/category_10191857.html</a><br><a href=\"https://zhuanlan.zhihu.com/p/33616481\">https://zhuanlan.zhihu.com/p/33616481</a><br><a href=\"https://zhuanlan.zhihu.com/p/106060640\">https://zhuanlan.zhihu.com/p/106060640</a><br><a href=\"https://blog.csdn.net/qq_33699981/article/details/72716951?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1-72716951-blog-107463289.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1-72716951-blog-107463289.pc_relevant_default&amp;utm_relevant_index=2\">https://blog.csdn.net/qq_33699981/article/details/72716951?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1-72716951-blog-107463289.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1-72716951-blog-107463289.pc_relevant_default&amp;utm_relevant_index=2</a></p>\n","categories":["Github","Hexo","Blog"],"tags":["博客搭建","学习笔记","博客优化"]},{"title":"Hello World","url":"/2022/05/14/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"}]